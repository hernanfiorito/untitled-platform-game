<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///***Player Variables***

player_start_point_x = 64;
player_start_point_y = 672;

//Movement Variables

player_x_spd = 0; //Player's X Speed
player_y_spd = 0; //Player's Y Speed

player_max_x_speed = 8; //Player's Max X Speed
player_max_y_speed = 12; //Player's Max Y Speed

player_jump_height = 12; //Player's Jump Height

player_mov_state = 0;
is_falling_from_plat = 0;

//Physics Variables

player_gravity = 0.5; //Player's Normal Gravity value
player_slide_gravity = 0.25; //Player's gravity when sliding in a wall
player_ground_acc = 1; //Player's acceleration in ground
player_ground_fric = 1.9; //Player's friction in ground
player_air_acc = 0.75; //Player's acceleration in air
player_air_fric = 0.1; //Player's friction in air
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player behaviour and interactions

//***BASIC MOVEMENTS***

//Keyboard-related variables
var key_right, key_left, key_jump_press, key_jump_release, key_down, key_reset;

key_left = -keyboard_check(vk_left);
key_right = keyboard_check(vk_right);
key_jump_press = keyboard_check_pressed(ord("Z"));
key_jump_release = keyboard_check_released(ord("Z"));
key_down = keyboard_check(vk_down);
key_reset = keyboard_check(ord("R"));

player_mov_state = key_left + key_right; // -1 for left movement, 0 for standing, 1 for right movement

//Collision Variables

is_col_x_left = place_meeting(x - 1, y, obj_block); //Player is colliding with an object to the left?
is_col_x_right = place_meeting(x + 1, y, obj_block); //Player is colliding with an object to the right?

is_in_ground = scr_platform(); //Check if there is something below the player

current_h_platform = instance_place(x, y + 1, obj_h_platform);
current_v_platform = instance_place(x, y + 3, obj_v_platform);

//Horizontal/Vertical movement

//Set ground/air acceleration and friction
if (is_in_ground){
    current_acc = player_ground_acc;
    current_fric = player_ground_fric;
}else{
    current_acc = player_air_acc;
    current_fric = player_air_fric;
}

//Set X speed
if (player_mov_state != 0){
    player_x_spd = scr_inertia(player_x_spd, player_mov_state * player_max_x_speed, current_acc);
}else{
    player_x_spd = scr_inertia(player_x_spd, player_mov_state * player_max_x_speed, current_fric);
}

//Set Y Speed
if(!is_in_ground){
    //If the player is sliding on a wall
    if((is_col_x_left || is_col_x_right) &amp;&amp; player_mov_state != 0 &amp;&amp; player_y_spd &gt;= 0){
        player_y_spd = scr_inertia(player_y_spd, player_max_y_speed * 0.25, player_slide_gravity);
    }else{
        player_y_spd = scr_inertia(player_y_spd, player_max_y_speed, player_gravity);
    }
}

//Jump
if (key_jump_press &amp;&amp; is_in_ground){
    //Jump down from a platform
    if(key_down &amp;&amp; (scr_is_in_top_of(obj_platform) || scr_is_in_top_of(obj_h_platform) 
    || (place_meeting(x, y + 1, obj_v_platform) || place_meeting(x, y + 2, obj_v_platform) || place_meeting(x, y + 3, obj_v_platform))) 
    &amp;&amp; !scr_is_in_top_of(obj_block)){
        y += 2;
        is_falling_from_plat = 1;
    }else{
        player_y_spd = -player_max_y_speed;
    }
}

//Variable Jump
if(key_jump_release &amp;&amp; player_y_spd &lt; 0){
    player_y_spd *= 0.25;
}

//Wall Jump
if(is_col_x_left &amp;&amp; key_jump_press &amp;&amp; !is_in_ground){
    if(player_mov_state &lt; 0){
        player_x_spd = player_max_x_speed * 0.5;
        player_y_spd = -player_jump_height * 0.75;
    }
}

if(is_col_x_right &amp;&amp; key_jump_press &amp;&amp; !is_in_ground){
    if(player_mov_state &gt; 0){
        player_x_spd = -player_max_x_speed * 0.5;
        player_y_spd = -player_jump_height * 0.75;
    }
}

//Reset player and spikes
if(key_reset){
    x = player_start_point_x;
    y = player_start_point_y;
}

//***COLLISION MANAGEMENT***

//X Collision Check
repeat(abs(player_x_spd)){
    //Slope Up
    if(place_meeting(x + sign(player_x_spd), y, obj_block) &amp;&amp; !place_meeting(x + sign(player_x_spd), y - 1, obj_block)){
        y--;
    }
    //Slope Down
    if(!place_meeting(x + sign(player_x_spd), y, obj_block) &amp;&amp; !place_meeting(x + sign(player_x_spd), y + 1, obj_block) &amp;&amp; place_meeting(x + sign(player_x_spd), y + 2, obj_block)){
        y++;
    }
    if(!place_meeting(x + sign(player_x_spd), y, obj_block)){
        x += sign(player_x_spd);
    }else{
        player_x_spd = 0;
        break;
    }
}

//Y Collition Check
repeat(abs(player_y_spd)){
    if(place_meeting(x, y + sign(player_y_spd), obj_block)){
        is_falling_from_plat = 0;
        player_y_spd = 0;
        break;
    }
    if(place_meeting(x, y + sign(player_y_spd), obj_platform) &amp;&amp; !place_meeting(x, y, obj_platform) &amp;&amp; player_y_spd &gt;= 0){
        player_y_spd = 0;
        break;
    }
    if(place_meeting(x, y + sign(player_y_spd), obj_h_platform) &amp;&amp; !place_meeting(x, y, obj_h_platform) &amp;&amp; player_y_spd &gt;= 0){
        player_y_spd = 0;
        break;
    }
    if(place_meeting(x, y + sign(player_y_spd), obj_falling_platform) &amp;&amp; !place_meeting(x, y, obj_falling_platform) &amp;&amp; player_y_spd &gt;= 0){
        player_y_spd = 0;
        break;
    }else{
        y += sign(player_y_spd);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
